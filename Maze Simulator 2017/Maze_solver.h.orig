#include <string>
#include <vector>
#include <iostream>
#include <fstream>
using namespace std;
const unsigned char MAZE_SIZE = 16;
const unsigned char NORTH = 0;
const unsigned char SOUTH = 1;
const unsigned char WEST = 2; 
const unsigned char EAST = 3;
const int MAX = 256;



//Mouse's left, right, and top wall is different from Maze's right wall and top wall
//All the wall detected by the mouse is based on it's sensor positions. 

class Cell {

public:
    unsigned char x, y;
    unsigned char dist;
    bool top_wall, right_wall;
    Cell(unsigned char x, unsigned char y, unsigned char dist) : 
        x(x), y(y), dist(dist){ top_wall = right_wall = false; }


    //TODO: DEBUG 
    Cell(unsigned char x, unsigned char y, bool top_wall, bool right_wall) : x(x), y(y), top_wall(top_wall), right_wall(right_wall){}




//     unsigned char y;
//     unsigned char x;
//     unsigned char dist;
//     bool top_wall;
//     bool right_wall;
//     bool visited;
//     bool hasMouse;

//     Cell(unsigned char x, unsigned char y, unsigned char dist) : y(y), x(x), dist(dist), top_wall(false), right_wall(false), hasMouse(false){}
//     Cell(unsigned char x, unsigned char y, bool top_wall, bool right_wall) : y(y), x(x), top_wall(top_wall), right_wall(right_wall), hasMouse(false){}
};

class Maze{

    public: 

        Maze();

        ~Maze() {
            // for (int i = 0; i < MAZE_SIZE; i++) {
            //     // delete [] *maze[i];
            //     for (int j = 0; j < MAZE_SIZE; j++){
            //         delete maze[i][j];
            //     }
            //     delete * maze[i];
            // }
        };

        unsigned char manhattan_dist(unsigned char x1, unsigned char x2, unsigned char y1, unsigned char y2);

        unsigned char min4(unsigned char a, unsigned char b, unsigned char c, unsigned char d);

        // bool is_center(Cell* cell);

        bool is_center(unsigned char x, unsigned char y);

        void print_maze(int x, int y, int dir);

        void print_maze();

        void print_mouse(int dir);

       	void move();

        void load_maze(string file_name);
        
        Cell * maze[MAZE_SIZE][MAZE_SIZE];
};

class Mouse{
	public:
		unsigned char direction, next_cell_dir, prev_mouse_dir;

		//the current position of Mouse, should be identical to the Cell'x and y
		unsigned char mouse_x,  mouse_y;

        unsigned char prev; // the previous direction, the previous direction is open by default

        //Those four variable indicates if the mouse can move in the certain direction
        bool north_open;
        bool south_open;
        bool east_open;
        bool west_open;
        bool front_sensor;
        bool left_sensor;
        bool right_sensor;

		Maze * reference_maze;

		Maze * detected_maze;

		std::vector <Cell*> stk; //vc was used as a stack to update the distance
		
		Mouse();

		~Mouse() {
            for (int i = 0; i < MAZE_SIZE; i++) {
                // delete [] *maze[i];
                for (int j = 0; j < MAZE_SIZE; j++){
                    delete detected_maze->maze[i][j];
                //    delete reference_maze->maze[i][j];
                }
            }
            delete detected_maze;
        //    delete reference_maze;
        };
		
		void set_direction(unsigned char dir);
		
		unsigned char get_direction();

        void print_sensor_reading();

        void print_open_direction();

		void print_maze();
        
        bool get_front_sensor_value(); //read the value from the front sensor and will update the wall properly

        bool get_left_sensor_value(); //read the value from the left sensor and will update the wall properly

        bool get_right_sensor_value(); //read the value from the right sensor and will update the wall properly
        
        void test_sensor();

        bool can_move();

        void update_distance();

        unsigned char min_open_neighbor(vector<Cell*> cells);

        void check_open_neighbor();

		void solve_maze();

		void move_one_cell();

		void load_maze(string file_name);

		void print_reference_maze();

};